// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  username          String    @unique
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false)
  emailVerifiedDate DateTime?
  profilePic        String    @default(" ")
  isAdmin           Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  favouriteIds      String[]  @db.ObjectId
  sessions          Session[]
  accounts          Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String   @unique
  description  String
  imageUrl     String
  imageTitle   String
  thumbnailUrl String
  trailerUrl   String
  videoUrl     String
  year         Int
  duration     String
  limit        Int
  genre        Genre[]
  isSeries     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  listIDs      String[] @db.ObjectId
  lists        List[]   @relation(fields: [listIDs], references: [id])
}

model List {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String   @unique
  type     String
  genre    Genre
  movieIDs String[] @db.ObjectId
  movies   Movie[]  @relation(fields: [movieIDs], references: [id])
}

enum Genre {
  Thriller
  Action
  Drama
  Tragedy
  Comedy
  SciFi
  Historical
  Period_piece
}
