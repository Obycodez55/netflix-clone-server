// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  username          String
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false)
  emailVerifiedDate DateTime?
  isAdmin           Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  profiles          Profile[]
  sessions          Session[]
  accounts          Account[]
}

model Profile {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  profilePic       ProfilePic
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  favouriteIds     String[]           @db.ObjectId @default([])
  favourites       Movie[]            @relation(fields: [favouriteIds], references: [id])
  User             User?              @relation(fields: [userId], references: [id])
  userId           String?            @db.ObjectId
  ContinueWatching ContinueWatching[]
  Watch            Watch[]

  @@unique([name, userId, profilePic])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String             @unique
  description      String
  imageUrl         String
  imageTitle       String
  thumbnailUrl     String
  trailerUrl       String
  videoUrl         String
  year             Int
  duration         String
  videoDuration    Float?
  limit            Int
  genre            Genre[]
  isSeries         Boolean            @default(false)
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  listIDs          String[]           @db.ObjectId
  lists            List[]             @relation(fields: [listIDs], references: [id])
  profileId        String[]           @db.ObjectId
  profiles         Profile[]          @relation(fields: [profileId], references: [id])
  ContinueWatching ContinueWatching[]
  Watch            Watch[]
}

model List {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String   @unique
  type     String
  genre    Genre
  movieIDs String[] @db.ObjectId
  movies   Movie[]  @relation(fields: [movieIDs], references: [id])
}

model ContinueWatching {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId String   @db.ObjectId
  movieId   String   @db.ObjectId
  timestamp Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id])
  movie   Movie   @relation(fields: [movieId], references: [id])
}

model Watch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId String   @db.ObjectId
  movieId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id])
  movie   Movie   @relation(fields: [movieId], references: [id])
}

enum Genre {
  Thriller
  Action
  Drama
  Tragedy
  Comedy
  SciFi
  History
  Horror
  Crime
  Romance
  Adventure
  Fantasy
  Animation
  Period_piece
  Biography
}

enum ProfilePic {
  red
  blue
  yellow
  green
  darkblue
  kids
}
